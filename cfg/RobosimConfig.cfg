PACKAGE='robosim_gazebo'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
g_base = gen.add_group("Robot Base")
g_base.add("robot_name", str_t, 4, "robot name", "hellobot")
g_base_diff = g_base.add_group("Differential", type="tab")
# Wheels
g_base_diff.add("wheel_size_r", double_t, 2, "wheel radius", 0.1, 0.01, 4)
g_base_diff.add("wheel_size_l", double_t, 2, "wheel length", 0.05, 0.01, 4)
g_base_diff.add("wheel_offset_y", double_t, 2, "wheel offset y", 0.11, 0.01, 4)
g_base_diff.add("wheel_mass_kg", double_t, 2, "wheel mass in kg", 0.3, 0.01, 4)
# Body
g_base_diff.add("body_size_x", double_t, 2, "robot body size x", 0.2, 0.01, 4)
g_base_diff.add("body_size_y", double_t, 2, "robot body size y", 0.2, 0.01, 4)
g_base_diff.add("body_size_z", double_t, 2, "robot body size z", 0.1, 0.01, 4)
g_base_diff.add("body_pos_x", double_t, 2, "body pos x", -0.08, -4, 4)
g_base_diff.add("body_pos_y", double_t, 2, "body pos y", 0, -4, 4)
g_base_diff.add("body_pos_z", double_t, 2, "body pos z", 0, -4, 4)
g_base_diff.add("body_mass_kg", double_t, 2, "body mass in kg", 10.0, 0.01, 40.0)
# Caster
g_base_diff.add("caster_size_r", double_t, 2, "caster size r", 0.05, 0.01, 4)
g_base_diff.add("caster_pos_x", double_t, 2, "caster pos x", -0.25, -4, 4)
g_base_diff.add("caster_pos_y", double_t, 2, "caster pos y", 0, -4, 4)
g_base_diff.add("caster_pos_z", double_t, 2, "caster pos z", -0.08, -4, 4)
g_base_diff.add("caster_mass_kg", double_t, 2, "caster mass in kg", 0.1, 0.01, 10.0)

g_sensors = gen.add_group("Sensors")
# Camera
g_sensors_cam = g_sensors.add_group("Camera", type="tab")
g_sensors_cam.add("enable_camera", bool_t, 8, "enable camera", False)
g_sensors_cam.add("cam_name", str_t, 4, "camera name", "camera")
g_sensors_cam.add("cam_x", double_t, 2, "camera pos x", 0.2, -4, 4)
g_sensors_cam.add("cam_y", double_t, 2, "camera pos y", 0, -4, 4)
g_sensors_cam.add("cam_z", double_t, 2, "camera pos y", 0.2, -4, 4)
g_sensors_cam.add("cam_roll", double_t, 2, "camera pos roll", 0, -3.14, 3.14)
g_sensors_cam.add("cam_pitch", double_t, 2, "camera pos pitch", 0, -3.14, 3.14)
g_sensors_cam.add("cam_yaw", double_t, 2, "camera pos yaw", 0, -3.14, 3.14)
g_sensors_cam.add("cam_body_radius", double_t, 2, "camera body radius", 0.03, 0, 1.0)
g_sensors_cam.add("cam_body_length", double_t, 2, "camera body length", 0.03, 0, 1.0)

g_sensors_cam.add("cam_update_rate", int_t, 16, "camera update rate in fps", 50, 1, 100)
g_sensors_cam.add("cam_horizontal_fov", double_t, 2, "the horizontal field of view of the camera in radians", 1.3962634, 0, 3.14)
g_sensors_cam.add("cam_width", int_t, 16, "camera image width in pixels", 800, 1, 2000)
g_sensors_cam.add("cam_height", int_t, 16, "camera image height in pixels", 600, 1, 2000)
g_sensors_cam.add("cam_view_visualize", bool_t, 8, "visualise view in Gazebo", True)


# Lidar
g_sensors_lid = g_sensors.add_group("Lidar", type="tab")
g_sensors_lid.add("enable_lidar", bool_t, 8, "enable lidar", False)
g_sensors_lid.add("lidar_name", str_t, 4, "lidar name", "lidar")
g_sensors_lid.add("lidar_x", double_t, 2, "lidar pos x", 0.2, -4, 4)
g_sensors_lid.add("lidar_y", double_t, 2, "lidar pos y", 0, -4, 4)
g_sensors_lid.add("lidar_z", double_t, 2, "lidar pos y", 0.3, -4, 4)
g_sensors_lid.add("lidar_roll", double_t, 2, "lidar pos roll", 0, -3.14, 3.14)
g_sensors_lid.add("lidar_pitch", double_t, 2, "lidar pos pitch", 0, -3.14, 3.14)
g_sensors_lid.add("lidar_yaw", double_t, 2, "lidar pos yaw", 0, -3.14, 3.14)
g_sensors_lid.add("lidar_body_radius", double_t, 2, "lidar body radius", 0.03, 0, 1.0)
g_sensors_lid.add("lidar_body_length", double_t, 2, "lidar body length", 0.03, 0, 1.0)

g_sensors_lid.add("lidar_update_rate", int_t, 16, "lidar update rate in fps", 50, 1, 100)
g_sensors_lid.add("lidar_samples", int_t, 16, "lidar samples", 720, 1, 5000)
g_sensors_lid.add("lidar_horizontal_resolution", int_t, 16, "lidar horisontal resolution", 1, 1, 20)
g_sensors_lid.add("lidar_min_angle", double_t, 2, "lidar min angle", -1.570796, -3.14, 3.14)
g_sensors_lid.add("lidar_max_angle", double_t, 2, "lidar max angle", 1.570796, -3.14, 3.14)
g_sensors_lid.add("lidar_min_range", double_t, 2, "lidar min range", 0.10, 0, 2.0)
g_sensors_lid.add("lidar_max_range", double_t, 2, "lidar max range", 10.0, 2.0, 30.0)
g_sensors_lid.add("lidar_range_resolution", double_t, 2, "lidar range resolution", 0.01, 0.01, 0.5)
g_sensors_lid.add("lidar_ray_visualize", bool_t, 8, "visualise lidar ray in Gazebo", True)

exit(gen.generate(PACKAGE, "robosim_gazebo", "Robosim"))